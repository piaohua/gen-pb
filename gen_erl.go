package main

import (
	"fmt"
	"io/ioutil"
	"time"
)

func main() {
	gen_erl_packet()
	gen_erl_unpack()
}

//TODO 内部协议通信
//TODO 优化为读取协议文件或配置文件

var (
	packetPath = "./packet.erl" //打包协议文件路径
	unpackPath = "./unpack.erl" //解包协议文件路径
)

//'协议配置
type proto struct {
	name string
	code uint32
}

//请求协议 key: 文件名
var protosUnpack = map[string][]proto{
	//login
	"login": []proto{
		{name: "CLogin", code: 1000},
		{name: "CRegist", code: 1002},
		{name: "CWxLogin", code: 1004},
	},
}

//响应协议
var protosPacket = map[string][]proto{
	//login
	"login": []proto{
		{name: "SLogin", code: 1000},
		{name: "SRegist", code: 1002},
		{name: "SWxLogin", code: 1004},
		{name: "SLoginOut", code: 1006},
	},
}

//.

//'生成打包文件
func gen_erl_packet() {
	var str string
	str += head_erl_packet()
	str += body_erl_packet()
	str += end_erl_packet()
	err := ioutil.WriteFile(packetPath, []byte(str), 0644)
	if err != nil {
		panic(fmt.Sprintf("write file err -> %v\n", err))
	}
}

//.

//'生成解包文件
func gen_erl_unpack() {
	var str string
	str += head_erl_unpack()
	str += body_erl_unpack()
	str += end_erl_unpack()
	err := ioutil.WriteFile(unpackPath, []byte(str), 0644)
	if err != nil {
		panic(fmt.Sprintf("write file err -> %v\n", err))
	}
}

//.

//'生成打包文件
func head_erl_packet() (str string) {
	str = `%% -*- coding: utf-8 -*-
%%%-------------------------------------------------------------------
%% @doc packet API, Automatically generated, do not edit
%% Generated by gen_erl.go version 0.1.0
%% Generated time 0.1.0
%% @author piaohua<814004090@qq.com>
`
	str += fmt.Sprintf("%%%% @end %s\n", time.Now().Local().Format("2006-01-02 15:04:05"))
	str += `
%%%-------------------------------------------------------------------

-module(packet).
-author("piaohua").

-export([p/1]).

`
	str += include_erl_packet()
	str += `
%% ------------------------------------------------------------------
%% API Function Definitions
%% ------------------------------------------------------------------

-spec p(Msg) -> {ok, Bin} | {error, undefined} when
      Bin :: binary(),
      Msg :: any().
`
	return
}

func include_erl_packet() (str string) {
	for k, _ := range protosPacket {
		str += fmt.Sprintf("-include(\"%s_pb.hrl\").\n", k)
	}
	return
}

//p(Msg) when is_record(Msg, 'SLogin') ->
//    Bin = login_pb:encode_msg(Msg),
//    {ok, <<10000:32, Bin/binary>>};
func body_erl_packet() (str string) {
	for f, m := range protosPacket {
		for _, v := range m {
			//str += fmt.Sprintf("p(Msg) when is_record(Msg, '%s') ->\n", v.name)
			str += fmt.Sprintf("p(#'%s'{} = Msg)) ->\n", v.name)
			str += fmt.Sprintf("\tBin = %s_pb:encode_msg(Msg),\n", f)
			str += fmt.Sprintf("\t{ok, <<%d:32, Bin/binary>>};\n", v.code)
		}
	}
	return
}

func end_erl_packet() string {
	return `p(_Msg) ->
	{error, undefined}.`
}

//.

//'生成打包文件
func head_erl_unpack() (str string) {
	str = `%% -*- coding: utf-8 -*-
%%%-------------------------------------------------------------------
%% @doc unpack API, Automatically generated, do not edit
%% Generated by gen_erl.go version 0.1.0
%% Generated time 0.1.0
%% @author piaohua<814004090@qq.com>
`
	str += fmt.Sprintf("%%%% @end %s\n", time.Now().Local().Format("2006-01-02 15:04:05"))
	str += `
%%%-------------------------------------------------------------------

-module(unpack).
-author("piaohua").

-export([p/1]).

`
	str += include_erl_unpack()
	str += `
%% ------------------------------------------------------------------
%% API Function Definitions
%% ------------------------------------------------------------------

-spec p(Bin) -> {ok, Msg} | {error, undefined} when
      Bin :: binary(),
      Msg :: any().
p(<<Code:32, Bin/binary>>) ->
    p(Code, Bin);
p(_) ->
    {error, undefined}.

`
	return
}

func include_erl_unpack() (str string) {
	for k, _ := range protosUnpack {
		str += fmt.Sprintf("-include(\"%s_pb.hrl\").\n", k)
	}
	return
}

//p(10000, Bin) ->
//    {ok, login_pb:decode_msg(Bin, 'CLogin')};
func body_erl_unpack() (str string) {
	for f, m := range protosUnpack {
		for _, v := range m {
			str += fmt.Sprintf("p(%d, Bin) ->\n", v.code)
			str += fmt.Sprintf("\t{ok, %s_pb:decode_msg(Bin, '%s')};\n", f, v.name)
		}
	}
	return
}

func end_erl_unpack() string {
	return `p(_Code, _Bin) ->
	{error, undefined}.`
}

//.

// vim: set foldmethod=marker foldmarker=//',//.:
